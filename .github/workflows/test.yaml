name: test
on: [push, workflow_dispatch]
jobs:
  test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install iverilog
        shell: bash
        run: sudo apt-get update && sudo apt-get install -y iverilog

      # Set Python up and install cocotb
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python packages
        shell: bash
        run: pip install -r test/requirements.txt

      - name: Run tests
        run: |
          cd test
          make clean
          make
          # make will return success even if the test fails, so check for failure in the results.xml
          ! grep failure results.xml

      - name: Test Summary
        uses: test-summary/action@v2.3
        with:
          paths: "test/results.xml"
        if: always()


      - name: Install ffmpeg and ImageMagick
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: ffmpeg imagemagick
          version: ttihp0p2 # I think naming a version builds a reusable packages cache for that name.

      - name: Convert output frames from PPMs to MP4
        shell: bash
        run: |
          pwd
          ls -al
          cd test
          ./animate.sh ./frames_out/frames.mp4 || find / -iname "*libblas.so.*" -ls 2>/dev/null

      - name: Convert output frames from PPMs to PNGs
        if: success() || failure() # Run this even if the step above fails.
        shell: bash
        run: |
          pwd
          ls -al
          cd test
          mkdir frames_out/png
          cd frames_out
          ../animate.sh png && cd png && tar czf ../frames.tgz *.png

      - name: Convert output frames from PPMs to animated GIF
        if: success() || failure() # Run this even if the step above fails.
        shell: bash
        run: |
          pwd
          ls -al
          cd test
          cd frames_out
          ../animate.sh frames.gif

      - name: Store frame output files
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: frames-rtl
          path: |
            test/frames_out/frames.mp4
            test/frames_out/frames.tgz
            test/frames_out/frames.gif

      - name: upload vcd
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-vcd
          path: |
            test/tb.vcd
            test/results.xml

  frames_preview:
    #needs: gds
    runs-on: ubuntu-24.04
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    steps:
      - name: Download frames
        uses: actions/download-artifact@v4
        with:
          name: frames-rtl
          path: gh-pages
      - name: Display preview in workflow summary
        shell: bash
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          PAGE_URL=$(echo "$PAGE_URL" | sed -e 's/\/$//')
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Animated frames preview
          ![Animated GIF of tested frames]($PAGE_URL/frames.gif)

          ![Animated GIF of tested frames]($PAGE_URL/test/frames_out/frames.gif)
          EOF
